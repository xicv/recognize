Metadata-Version: 2.1
Name: voiclaude
Version: 0.1.0
Summary: Voice MCP Server for Claude Code using recognize CLI
Author: VoiClaude Team
Project-URL: Source, https://github.com/recognizing/voiclaude
Project-URL: Bug Reports, https://github.com/recognizing/voiclaude/issues
Keywords: voice recognition speech mcp claude ai llm local
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Multimedia :: Sound/Audio :: Speech
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: mcp[cli]>=1.0.0
Requires-Dist: mcp>=1.0.0
Requires-Dist: fastmcp>=0.1.0
Requires-Dist: typing_extensions>=4.8.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: mypy>=0.991; extra == "dev"

# VoiClaude - Voice MCP Server for Claude Code

A local voice interaction system for [Claude Code](https://docs.anthropic.com/en/docs/claude-code) that provides speech recognition capabilities using the `recognize` CLI. VoiClaude implements the [Model Context Protocol (MCP)](https://modelcontextprotocol.io) to seamlessly integrate voice features into your Claude Code workflow.

## ✨ Features

- **🎤 Local Speech Recognition**: Uses the `recognize` CLI with CoreML acceleration on macOS
- **⚡ Real-time Processing**: Low-latency voice activity detection for natural conversations  
- **🗣️ Three Interaction Modes**:
  - `/listen` - One-shot speech transcription with auto-clipboard
  - `/conv` - Continuous conversation mode
  - `/listen_stop` - Manual termination of active sessions
- **📊 Enhanced Status Feedback**: Detailed activity tracking and timing information
- **🌍 Multi-language Support**: Supports 99+ languages with translation capabilities
- **📋 Auto-clipboard Integration**: Transcriptions automatically copied for easy pasting
- **🔧 Smart Configuration**: Integrates with existing `recognize` CLI settings
- **🔒 Privacy First**: Fully local processing - no cloud services required
- **🚀 Easy Installation**: Simple setup with user-scoped configuration

## 📋 Prerequisites

1. **recognize CLI**: VoiClaude requires the `recognize` command to be installed and available. 
   - Install from the parent project or system PATH
   - Ensure it works by running: `recognize --help`

2. **Python 3.8+**: Required for the MCP server

3. **Claude Code**: Required for MCP integration

## 🚀 Quick Installation

### Option 1: Automated Installation (Recommended)

```bash
# Run the installation script
./install.sh

# Or with options
./install.sh --help
```

### Option 2: Manual Installation

**Step 1: Install VoiClaude**

```bash
# From the voiclaude directory
pip install -e .

# Development installation with extra tools
pip install -e ".[dev]"

# Or using uv (recommended)
uv add .
```

**Step 2: Add to Claude Code**

```bash
# User-scoped configuration (works in all projects)
claude mcp add voiclaude --scope user voiclaude

# Verify installation
claude mcp list
```

**Alternative: Manual configuration**

Add VoiClaude to your Claude Code MCP configuration:

**macOS/Linux:** `~/.config/claude-code/mcp.json`
**Windows:** `%APPDATA%\claude-code\mcp.json`

```json
{
  "mcpServers": {
    "voiclaude": {
      "command": "voiclaude",
      "args": [],
      "env": {}
    }
  }
}
```

### Step 3: Verify Installation

Check that VoiClaude is connected:

```bash
claude mcp list
# Should show: voiclaude: voiclaude - ✓ Connected
```

## 🎯 Usage

Once installed, you'll have access to voice commands in Claude Code:

### 🎤 Voice Commands

#### One-Shot Speech Recognition

```
/mcp__voiclaude__listen
```

**Features:**
- 🎤 Records until speech detected or timeout
- 📋 **Auto-copies transcription to clipboard**
- 📊 **Detailed status reporting** with timing information
- ⚡ Uses voice activity detection for efficiency

**Options:**
```
/mcp__voiclaude__listen model=medium language=en timeout=30 vad_mode=true translate=false
```

**Manual Stop:**
```
/mcp__voiclaude__listen_stop
```

### Continuous Conversation Mode

```
/mcp__voiclaude__conv mode=start
```

**Control conversation:**
```
/mcp__voiclaude__conv mode=start model=medium language=en
/mcp__voiclaude__conv mode=stop
/mcp__voiclaude__conv mode=status

# Alternative syntax (both work):
/mcp__voiclaude__conv action=start
/mcp__voiclaude__conv action=stop
```

#### System Health & Debugging

```
# Check system health
/mcp__voiclaude__healthcheck

# Get comprehensive debug information
/mcp__voiclaude__debug_info

# Manual stop for any active sessions
/mcp__voiclaude__listen_stop
```

### Enhanced Response Information

All commands now return detailed status information:

```json
{
  "success": true,
  "transcription": "Hello world",
  "user_message": "✅ Successfully transcribed speech in 3.2s", 
  "activity_summary": "✅ Successfully transcribed speech",
  "processing_time": 3.2,
  "clipboard_copied": true,
  "phase": "completed",
  "metadata": {
    "model": "medium",
    "duration_seconds": 3.2
  }
}
```

## ⚙️ Configuration

VoiClaude automatically inherits configuration from your `recognize` CLI setup and supports additional customization:

### Configuration Sources (in priority order)
1. **Command arguments** (highest priority)
2. **Environment variables** (`VOICLAUDE_*` or `WHISPER_*` prefix)
3. **VoiClaude config file** (`~/.voiclaude/config.json`)
4. **Recognize CLI config** (user and project configs)

### Environment Variables

```bash
export VOICLAUDE_MODEL=medium         # Default model
export VOICLAUDE_LANGUAGE=en          # Default language
export VOICLAUDE_VAD_MODE=true        # Enable VAD
export VOICLAUDE_TIMEOUT=30           # Recognition timeout
export VOICLAUDE_LOG_LEVEL=INFO       # Logging level
```

### Configuration File Example

Create `~/.voiclaude/config.json`:

```json
{
  "default_model": "medium",
  "vad_mode": true,
  "language": "en", 
  "timeout_seconds": 30,
  "conversation_timeout": 300,
  "threads": 4,
  "translate": false
}
```

## 🔧 Advanced Usage

### Custom Model Configuration

```
/mcp__voiclaude__listen model=small.en language=es translate=true
```

### Multi-language Conversations

```bash
# Spanish to English translation
/mcp__voiclaude__conv mode=start model=medium language=es translate=true

# Chinese conversation mode  
/mcp__voiclaude__conv mode=start model=large-v3 language=zh

# Quick status check
/mcp__voiclaude__conv mode=status
```

### Development Mode

Run the server directly for testing:

```bash
# Direct execution
python -m voiclaude

# With debug logging
VOICLAUDE_LOG_LEVEL=DEBUG python -m voiclaude
```

## 📊 MCP Resources

VoiClaude provides several resources for monitoring and configuration:

- `config://voiclaude` - Current configuration
- `models://available` - Available recognition models  
- `status://voice` - Voice system status

## 🛠️ Troubleshooting

### Command Not Found
```
Error: Cannot find 'recognize' CLI
```
**Solution:** Ensure `recognize` is installed and in your PATH:
```bash
which recognize
recognize --help
```

### Permission Denied
```
Error: Permission denied accessing microphone
```
**Solution:** Grant microphone permissions in System Preferences > Security & Privacy > Microphone

### MCP Connection Failed
```
Error: MCP server not responding
```
**Solutions:**
1. Check server status: `claude mcp list`
2. Verify VoiClaude is installed: `voiclaude --help`
3. Re-add the server: `claude mcp add voiclaude --scope user voiclaude`
4. Check logs for import errors
5. Restart Claude Code

### Conv Command Not Working
```
Conv command appears to run but doesn't execute
```
**Solutions:**
1. Use correct parameter syntax: `mode=start` or `action=start`
2. Check server logs for execution confirmation
3. Verify with: `/mcp__voiclaude__conv mode=status`

### High CPU Usage
**Solutions:**
1. Use VAD mode: `vad_mode=true`
2. Use smaller models: `model=tiny.en` or `model=base.en`
3. Reduce thread count: `threads=2`

## 🔍 Logging and Debugging

Enable debug logging to troubleshoot issues:

```bash
export VOICLAUDE_LOG_LEVEL=DEBUG
```

Logs are written to stderr and can be viewed in Claude Code's developer console or terminal.

## 📊 Status Phases and Feedback

VoiClaude provides detailed status information throughout the recognition process:

### Recognition Phases
- 🔧 **`initializing`** - Setting up speech recognition
- 📥 **`loading`** - Loading the specified model
- 🎤 **`listening`** - Ready for speech input (speak now)
- 🔄 **`processing`** - Analyzing audio and generating transcription
- ✅ **`completed`** - Successfully transcribed speech

### Error/Timeout Phases
- ⏰ **`timeout`** - No speech detected within timeout period
- 🔇 **`no_speech`** - No speech detected (check microphone)
- 🚫 **`error`** - System error occurred

### Response Fields
All responses include comprehensive status information:
- **`processing_time`** - Total duration in seconds
- **`activity_summary`** - Human-readable status description
- **`user_message`** - User-friendly result message
- **`clipboard_copied`** - Whether text was copied to clipboard
- **`phase`** - Current processing phase

## 📋 Supported Models

VoiClaude supports all models available in your `recognize` CLI installation:

### English-only Models
- `tiny.en` (39 MB) - Fastest, lower accuracy
- `base.en` (148 MB) - Good balance of speed/accuracy
- `small.en` (488 MB) - Higher accuracy
- `medium.en` (1.5 GB) - Very high accuracy ⭐

### Multi-language Models  
- `tiny` (39 MB) - 99 languages, fastest
- `base` (148 MB) - 99 languages, good balance
- `small` (488 MB) - 99 languages, higher accuracy
- `medium` (1.5 GB) - 99 languages, very high accuracy ⭐ **Default**
- `large-v3` (3.1 GB) - 99 languages, highest accuracy

**Recommendation:** VoiClaude defaults to `medium` for the best balance of accuracy and performance with CoreML acceleration.

## 🤝 Contributing

We welcome contributions! Please see the parent project for development guidelines.

## 📄 License

This project is licensed under the same terms as the parent `recognize` project.

## 🆘 Support

For issues and support:
1. Check this README for common solutions
2. Review the `recognize` CLI documentation
3. Check Claude Code MCP documentation
4. Open an issue in the parent project repository

---

**Made with ❤️ for the Claude Code community**
